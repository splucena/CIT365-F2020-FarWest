// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SacramentPlanner.Models;

namespace SacramentPlanner.Migrations
{
    [DbContext(typeof(MeetingContext))]
    [Migration("20201215141446_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("SacramentPlanner.Models.Bishopric", b =>
                {
                    b.Property<int>("BishopricId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("BishopricName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BishopricId");

                    b.ToTable("Bishopric");
                });

            modelBuilder.Entity("SacramentPlanner.Models.Planner", b =>
                {
                    b.Property<int>("PlannerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("BishopricId")
                        .HasColumnType("int");

                    b.Property<string>("ClosePrayer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("MeetingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OpenPrayer")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PlannerId");

                    b.HasIndex("BishopricId");

                    b.ToTable("Planner");
                });

            modelBuilder.Entity("SacramentPlanner.Models.Song", b =>
                {
                    b.Property<int>("SongId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CloseSongNum")
                        .HasColumnType("int");

                    b.Property<string>("CloseSongTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("InterSongNum")
                        .HasColumnType("int");

                    b.Property<string>("InterSongTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OpenSongNum")
                        .HasColumnType("int");

                    b.Property<string>("OpenSongTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlannerId")
                        .HasColumnType("int");

                    b.Property<int>("SacramentSongNum")
                        .HasColumnType("int");

                    b.Property<string>("SacramentSongTitle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SongId");

                    b.HasIndex("PlannerId");

                    b.ToTable("Songs");
                });

            modelBuilder.Entity("SacramentPlanner.Models.Speaker", b =>
                {
                    b.Property<int>("SpeakerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("PlannerId")
                        .HasColumnType("int");

                    b.Property<string>("SpeakerName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("SpeakerTopic")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("SpeakerId");

                    b.HasIndex("PlannerId");

                    b.ToTable("Speakers");
                });

            modelBuilder.Entity("SacramentPlanner.Models.Planner", b =>
                {
                    b.HasOne("SacramentPlanner.Models.Bishopric", "Bishopric")
                        .WithMany("Planners")
                        .HasForeignKey("BishopricId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bishopric");
                });

            modelBuilder.Entity("SacramentPlanner.Models.Song", b =>
                {
                    b.HasOne("SacramentPlanner.Models.Planner", null)
                        .WithMany("Songs")
                        .HasForeignKey("PlannerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SacramentPlanner.Models.Speaker", b =>
                {
                    b.HasOne("SacramentPlanner.Models.Planner", null)
                        .WithMany("Speakers")
                        .HasForeignKey("PlannerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SacramentPlanner.Models.Bishopric", b =>
                {
                    b.Navigation("Planners");
                });

            modelBuilder.Entity("SacramentPlanner.Models.Planner", b =>
                {
                    b.Navigation("Songs");

                    b.Navigation("Speakers");
                });
#pragma warning restore 612, 618
        }
    }
}
